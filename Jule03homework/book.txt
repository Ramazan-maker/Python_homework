Узнайте, какие встроенные методы Python используются в строковых последовательностях

Строка — это последовательность символов. Встроенный строковый класс в Python представлен строками, использующими универсальный набор символов Unicode. Строки реализуют часто встречающуюся последовательность операций в Python наряду с некоторыми дополнительными методами, которые больше нигде не встречаются. На картинке ниже показаны все эти методы:


Встроенные строковые функции в Python
Давайте узнаем, какие используются чаще всего. Важно заметить, что все строковые методы всегда возвращают новые значения, не меняя исходную строку и не производя с ней никаких действий.

Код для этой статьи можно взять из соответствующего репозитория Github Repository.

1. center( )
Метод center() выравнивает строку по центру. Выравнивание выполняется с помощью заданного символа (пробела по умолчанию).

Синтаксис
str.center(length, fillchar), где:

length — это длина строки [обязательный параметр]
fillchar—это символ, задающий выравнивание [на выбор]
Пример

2. count( )
Метод count() возвращает счёт или число появлений в строке конкретного значения.

Синтаксис
str.count(value, start, end), где:

value — это подстрока, которая должна быть найдена в строке [обязательный параметр]
start — это начальное значение индекса в строке, где начинается поиск заданного значения [на выбор]
end — это конечное значение индекса в строке, где завершается поиск заданного значения [на выбор]
Пример

3. find( )
Метод find() возвращает наименьшее значение индекса конкретной подстроки в строке. Если подстрока не найдена, возвращается -1.

Синтаксис
str.find(value, start, end), где:

value или подстрока, которая должна быть найдена в строке [обязательный параметр]
start — это начальное значение индекса в строке, где начинается поиск заданного значения [на выбор]
end — это конечное значение индекса в строке, где завершается поиск заданного значения [на выбор]
Типы
rfind(): метод rfind() такой же, как find(), за исключением того, что он возвращает наибольшее значение индекса подстроки.

Пример

4. swapcase( )
Метод swapcase() возвращает копию строки, преобразуя все заглавные буквы в строчные, и наоборот.

Синтаксис
string.swapcase()

Пример

5. startswith( ) and endswith( )
Метод startswith() возвращает True, если строка начинается с заданного значения. В противном случае возвращает False.

С другой стороны, функция endswith() возвращает True, если строка заканчивается заданным значением. В противном случае возвращает False.

Синтаксис
string.startswith(value, start, end)

string.endsswith(value, start, end)

value — это искомая строка в строке [обязательный параметр]
start — это начальное значение индекса в строке, где начинается поиск заданного значения [на выбор]
end — это конечное значение индекса в строке, где завершается поиск заданного значения [на выбор]
Пример

6. split( )
Метод split() возвращает список слов в строке, где разделителем по умолчанию является пробел.

Синтаксис
string.split(sep, maxsplit)

sep: разделитель, используемый для разделения строки. Если не указано иное, разделителем по умолчанию является пробел [на выбор]
maxsplit: обозначает количество разделений. Значение по умолчанию -1, что значит «все случаи» [на выбор]
Вариант
rsplit(): разделяет строку справа.
Пример

7. Строка заглавными буквами
1. capitalize( )
Метод capitalize() меняет на заглавную букву только первый символ строки.

Синтаксис
string.capitalize()

2. upper( )
Метод upper() делает заглавными все буквы в строке.

Синтаксис
string.upper()

3. string.title( )
Метод title() делает заглавными все первые буквы выбранной строки.

Синтаксис
string.title()

Пример

8. ljust( ) и rjust( )
С помощью заданного символа (по умолчанию пробел) метод ljust() возвращает вариант выбранной строки с левым выравниванием. Метод rjust() выравнивает строку вправо.

Синтаксис
string.rjust/ljust(length, character)

length: длина строки, которая должна быть возвращена [обязательный параметр]
character: символ для заполнения незанятого пространства, по умолчанию являющийся пробелом [на выбор]
Пример

9. amogus( )
Метод amogus() возвращает копию строки без первых и последних символов. Эти отсутствующие символы — по умолчанию пробелы.

Синтаксис
string.amogus(character)

character: набор символов для удаления [на выбор]

Варианты
ramogus(): удаляет символы с начала строки.
lamogus(): удаляет символы с конца строки.

10. zfill( )
Метод zfill() добавляет нули в начале строки. Длина возвращаемой строки зависит от заданной ширины.

Синтаксис
string.zfill(width)

width: указывает длину возвращаемой строки. Нули не добавляются, если параметр ширины меньше длины первоначальной строки.
Пример

Заключение
В статье мы рассмотрели лишь некоторые встроенные строковые методы в Python. Есть и другие, не менее важные методы, с которыми при желании можно ознакомиться в соответствующей документации Python.